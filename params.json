{"name":"Charcoal-config","tagline":"Configuration container for all things Charcoal","body":"Charcoal Config\r\n===============\r\n\r\nConfiguration container for all things Charcoal.\r\n\r\n[![Build Status](https://travis-ci.org/locomotivemtl/charcoal-config.svg?branch=master)](https://travis-ci.org/locomotivemtl/charcoal-config)\r\n\r\nThis package provides easy hierarchical configuration container (for config storage and access).\r\n`Charcoal\\Config` acts as a configuration registry / repository.\r\n\r\n## Main features\r\n\r\n- [Load data from ini, json or php files.](#supported-file-formats)\r\n- [Customizable separator access.](#separators)\r\n- [Delegates (Chaining configurations).](#delegates)\r\n- [Array access.](#array-access)\r\n- [Implement Interop-Container.](#interoperability)\r\n- [Provide Configurable Interface](#configurable)\r\n\r\n## Supported file formats\r\n\r\nThere are currently 3 supported file formats: `ini`, `json` and `php`.\r\n\r\nTo load configuration from a file, simply use the `add_file()` method. The file's extension will be used to determine how to load the file.\r\n\r\nIt is also possible to load a config file directly from the constructor, by passing a file _string_ as the first argument.\r\n\r\n``` php\r\n$config = new \\Charcoal\\GenericConfig('../config/my-config.json');\r\n```\r\n\r\n### JSON configuration\r\n\r\nFor the JSON file:\r\n\r\n```json\r\n{\r\n\t\"example\":{\r\n\t\t\"foo\":\"bar\"\r\n\t}\r\n}\r\n```\r\n\r\nLoading this file into configuration would be:\r\n\r\n```php\r\n$config = new \\Charcoal\\GenericConfig();\r\n$config->add_file('./config/my-config.json');\r\n\r\n// Output \"bar\"\r\necho $config['example/foo'];\r\n```\r\n\r\n### INI configuration\r\n\r\nFor the INI file:\r\n\r\n```ini\r\n[example]\r\nfoo=bar\r\n```\r\n\r\nLoading this file into configuration would be:\r\n\r\n```php\r\n$config = new \\Charcoal\\GenericConfig();\r\n$config->add_file('./config/my-config.ini');\r\n\r\n// Outputs \"bar\"\r\necho $config['exampe/foo'];\r\n```\r\n\r\n### PHP configuration\r\n\r\nThe PHP configuration is loaded from an internal `include`, therefore, the scope of `$this` in the php file is the current _Config_ instance.\r\n\r\nFor the PHP file:\r\n\r\n```php\r\n<?php\r\n$this['example'] = [\r\n\t'foo'=>'bar'\r\n];\r\n```\r\n\r\nLoading this file into configuration would be:\r\n\r\n```php\r\n$config = new \\Charcoal\\GenericConfig();\r\n$config->add_file('./config/my-config.php');\r\n\r\n// Outputs \"bar\"\r\necho $config['example/foo'];\r\n```\r\n\r\n## Separators\r\n\r\nIt is possible to fetch embedded _array-ish_ values recursively in a single call with the help of _separators_.\r\n\r\nThe default separator is `/` (it can be retrieved with `separator()`) but it can be changed easily with `set_separator()`.\r\n\r\n> ðŸ‘‰ Separator must be a single character. An exception will be thrown if trying to call `set_separator()` with a longer string.\r\n\r\n### How to use\r\n\r\n```php\r\n$config = new \\Charcoal\\GenericConfig();\r\n$config->set_separator('.'); // Default is \"/\"\r\n$config->set_data([\r\n\t'foo', [\r\n\t\t'baz'=>example,\r\n\t\t'bar'=>42\r\n\t]\r\n]);\r\n// Ouput \"42\"\r\necho $config->get('foo.bar');\r\n```\r\n\r\n## Delegates\r\n\r\nIt is possible to \"chain\" configuration containers with the help of _delegates_.\r\n\r\nIf one or more delegates are added to a class, they will be used as _fallback_ when trying to fetch a key that isn't set in the config.\r\n\r\n```php\r\n$config = new \\Charcoal\\Config\\GenericConfig([\r\n\t'foo' => 'baz'\r\n]);\r\n\r\n// Returns `false`\r\n$config->has('bar');\r\n\r\n// Throws exception\r\necho $config->get('bar');\r\n\r\n$config2 = new \\Charcoal\\Config\\GenericConfig([\r\n\t'bar' => 42\r\n]);\r\n\r\n$config->add_delegate($config2);\r\n\r\n// Returns 42\r\necho $config->get('bar');\r\n```\r\n\r\nDelegates can be set with:\r\n\r\n- `set_delegates()` to set an array of delegates.\r\n- `add_delegate()` to add a config object at the end of the delegate list.\r\n- `prepend_delegate()` to add a config object at the beginning of the delegate list.\r\n\r\nIt is also possible to set delegates by passing them (as an array of ConfigInterface) to the constructor:\r\n\r\n```php\r\n$config = new \\Charcoal\\Config\\GenericConfig('../config/my-config.json', [$delegate1, $delegate2]);\r\n```\r\n\r\n> ðŸ‘‰ The order of the delegates is important. They are looked in the order they are added, so the first match is returned. Use `prepend_delegate()` to add a config at the beginning of the stack (top priority).\r\n\r\n## Array Access\r\n\r\nThe config class implements the `ArrayAccess` interface and therefore can be used with array style:\r\n\r\n```php\r\n$config = new \\Charcoal\\Config\\GenericConfig();\r\n\r\n// Set value with array\r\n$config['foobar'] = 42;\r\n\r\n// Returns `42`\r\necho $config['foobar'];\r\n\r\n// Returns `true`\r\nisset($config['foobar']);\r\n\r\n// Returns `false`\r\nisset($config['invalid-key']);\r\n\r\n// Invalidate the \"foobar\" config key\r\nunset($config['foobar']);\r\n```\r\n\r\n## Interoperability\r\n\r\nThe `\\Charcoal\\Config` container implements the `container-interop` interface.\r\n\r\nSee [https://github.com/container-interop/container-interop](https://github.com/container-interop/container-interop).\r\n\r\nThis interface requires the `get()` and `has()` methods:\r\n\r\n```php\r\n$config = new \\Charcoal\\Config\\GenericConfig([\r\n\t'foobar'=>42\r\n]);\r\n\r\n// Returns `true`\r\n$config->has('foobar');\r\n\r\n// Returns `false`\r\n$config->has('invalid-key');\r\n\r\n// Returns `42`\r\n$config->get('foobar');\r\n```\r\n\r\n## Configurable\r\n\r\nAlso provided in this package is a _Configurable_ interface (`\\Charcoal\\Config\\ConfigrableInterface`) and its full implementation as a trait. `\\Charcoal\\Config\\ConfigurableTrait`.\r\n\r\nConfigurable (which could have been called \"_Config Aware_\") objects can have an associated config instance that can help defines various properties, states, or other.\r\n\r\nThe config object can be set with `set_config()` and retrieve with `config()`.\r\n\r\nImplementation example:\r\n\r\n```php\r\nuse \\Charcoal\\Config\\ConfigurableInterface;\r\nuse \\Charcoal\\Config\\ConfigurableTrait;\r\n\r\nuse \\Acme\\Foo\\FooConfig;\r\n\r\nclass Foo implements ConfigurableInterface\r\n{\r\n\tuse ConfigurableTrait;\r\n\r\n\tpublic function create_config(array $data = null)\r\n\t{\r\n\t\t$config = new FooConfig();\r\n\t\tif ($data !== null) {\r\n\t\t\t$config->set_data($data);\r\n\t\t}\r\n\t\treturn $config;\r\n\t}\r\n}\r\n```\r\n\r\nThe previous class could be use as such:\r\n\r\n```php\r\n$foo = new Foo();\r\n$foo->set_config([\r\n\t'bar'=>[\r\n\t\t'baz'=>42\r\n\t]\r\n]);\r\n\r\n// echo 42\r\n$foo_config = $foo->config();\r\necho $foo_config['bar/baz'];\r\n```\r\n\r\n## Development\r\n\r\n### Coding Style\r\n\r\nAll Charcoal modules follow the same coding style and `charcoal-core` is no exception. For PHP:\r\n\r\n- [_PSR-1_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md), except for\r\n\t- Method names MUST be declared in `snake_case`.\r\n- [_PSR-2_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md), except the PSR-1 requirement.\r\n- [_PSR-4_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md), autoloading is therefore provided by _Composer_\r\n- [_phpDocumentor_](http://phpdoc.org/)\r\n\t- Add DocBlocks for all classes, methods, and functions;\r\n\t- For type-hinting, use `boolean` (instead of `bool`), `integer` (instead of `int`), `float` (instead of `double` or `real`);\r\n\t- Omit the `@return` tag if the method does not return anything.\r\n- Naming conventions\r\n\t- Use `snake_case`, not `camelCase`, for variable, option, parameter, argument, function, and method names;\r\n\t- Prefix abstract classes with `Abstract`;\r\n\t- Suffix interfaces with `Interface`;\r\n\t- Suffix traits with `Trait`;\r\n\t- Suffix exceptions with `Exception`;\r\n\t- For type-hinting, use `int` (instead of `integer`) and `bool` (instead of `boolean`);\r\n\t- For casting, use `int` (instead of `integer`) and `!!` (instead of `bool` or `boolean`);\r\n\t- For arrays, use `[]` (instead of `array()`).\r\n\r\nCoding styles are  enforced with `grunt phpcs` ([_PHP Code Sniffer_](https://github.com/squizlabs/PHP_CodeSniffer)). The actual ruleset can be found in `phpcs.xml`.\r\n\r\n> ðŸ‘‰ To fix minor coding style problems, run `grunt phpcbf` ([_PHP Code Beautifier and Fixer_](https://github.com/squizlabs/PHP_CodeSniffer)). This tool uses the same ruleset as *phpcs* to automatically correct coding standard violations.\r\n\r\nThe main PHP structure follows the [_PSR-4_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md) standard. Autoloading is therefore provided by _Composer_.\r\n\r\n## Authors\r\n\r\n- Mathieu Ducharme <mat@locomotive.ca>\r\n\r\n## Changelog\r\n\r\n### 0.2\r\n_Released on 2015-02-09_\r\n\r\n- Added the \"delegates\" feature.\r\n- Setting value with a separator now tries to set as array.\r\n- Implements the container-interop interface.\r\n\r\n### 0.1.1\r\n_Released on 2015-12-02_\r\n\r\n- Removed the second argument for the constructor (currently unused).\r\n- Clearer error message on invalid JSON files.\r\n- Fix composer.json and the autoloader.\r\n- Various internal changes (PSR2 compliancy, _with psr1 exception_).\r\n\r\n### 0.1\r\n_Released on 2015-08-25_\r\n\r\n- Initial release of `charcoal-config`,\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}